""""
otto bot
Copyright ¬© hi_skittles 2024
Contains code from ¬© Krypton 2019-2023 - https://github.com/kkrypt0nn (https://krypton.ninja) Version: 6.1.0
"""

import aiohttp
import discord
from discord.ext import commands
from discord.ext.commands import Context

from utils.wordle import Wordle
from utils.botlogger import Logs as BotLogger


class Fun(commands.Cog, name="fun"):
    def __init__(self, bot) -> None:
        self.bot = bot

    # TODO: somehow fix the duplicate yellow entries. no idea how..
    @commands.hybrid_command(
        name="wordle",
        description="Play a little wordle game.",
        aliases=["wl"],
    )
    @commands.cooldown(1, 60, commands.BucketType.user)
    async def wordle(self, context: Context) -> None:
        try:
            game = Wordle("./utils/words.csv", 0, 5)
        except FileNotFoundError:
            await BotLogger.log_primary(self.bot, context, "wordle", True, "The file words.csv was not found.",
                                        discord.Colour.dark_red())
            embed = discord.Embed(description="I've encountered an error. Please check <#1200487447017046156> "
                                              "for more information.", colour=discord.Colour.dark_red())
            await context.send(embed=embed)
            return
        word_answer = game.retrieve_word
        await BotLogger.log_primary(self.bot, context, "wordle", False, f"{context.author.mention} "
                                                                        f"started a wordle game. Their answer is "
                                                                        f"**{word_answer}**.")
        game_embed = discord.Embed(description=f"Welcome to Wordle! You have {game.max_tries} tries to guess the word. "
                                               "The word is 5 letters long.", colour=discord.Colour.orange())
        bot_message = await context.send(embed=game_embed)
        feedback = ""
        while game.tries < game.max_tries:
            game.tries += 1
            guess = await self.bot.wait_for("message", check=lambda message: message.author == context.author,
                                            timeout=180)
            guess = guess.content.lower()
            if len(guess) != 5:
                game.tries -= 1
                await context.send(content="The word is 5 letters long.")
                continue
            else:
                if game.tries > 1:
                    feedback = "\n".join(feedback.splitlines()[:-1])
                feedback += "\n"
                for entry, word in zip(guess, word_answer):
                    if entry in word_answer and entry == word:
                        feedback += f"üü©"  # üü©
                    elif entry in word_answer and entry != word:
                        # print(f"word: {word}, guess: {guess}, entry: {entry}")
                        feedback += f"üü®"  # üü®
                    else:
                        feedback += f"‚¨õ"  # ‚¨õ
                feedback += "\n"
                for entry in guess:
                    feedback += f":regional_indicator_{entry}:"
                edited_embed = discord.Embed(description=f"\n{feedback}\n", colour=discord.Colour.orange())
                await bot_message.edit(embed=edited_embed)
            if guess == word_answer:
                embed = discord.Embed(description=f"You win! The answer was **{word_answer}**",
                                      colour=discord.Colour.brand_green())
                await context.send(embed=embed)
                # await bot_message.delete(delay=5)
                break
        else:
            await context.send(f"You lose! The word was {word_answer}.")
            # await bot_message.delete(delay=5)

    @commands.hybrid_command(
        name="meow",
        description="nothing :3",
    )
    @commands.cooldown(1, 5, commands.BucketType.channel)
    async def meow(self, context: Context) -> None:
        meow_face = """
        ‚£§‚£§‚£Ä‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚£ø‚°ø‚†à‚†à‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†ø‚°á‚°Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚¢¶‚£ß‚°á‚¢∞‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚†â‚†ô‚†≤‚£§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚£∏‚£ø‚£ø‚†Ä‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢æ‚£ß‚†Ä‚†Ä‚†ô‚¢¶‚£Ç‚°Ä‚¢†‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚£ø‚°ü‚°á‚†Ä‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚¢∑‚°Ä‚†Ä‚¢Ä‚£¨‚£∂‚°ø‚¢†‚£§‚¢†‚£¥‚†∂‚†í‚†í‚†í‚¢¶‚£†‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚°¥‚†í‚¢∂‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚£ø‚°á‚°á‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£Ü‚¢æ‚£ø‚°ø‚£∑‚£ø‚£∑‚£ø‚£ø‚£±‚£Ü‚£Ω‚°Ä‚£º‚£†‚£§‚£¥‚£∂‚†∂‚£∂‚£∂‚£æ‚†ü‚†Å‚†Ä‚¢∏‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚£ø‚°á‚°á‚†Ä‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚£∑‚£¶‚£ø‚£ß‚£º‚£ø‚£ø‚£ø‚£º‚£ø‚£ø‚°ø‚¢≥‚£ü‚¢°‚£º‚£ø‚£ø‚£æ‚£Ø‚†û‚†Å‚†Ä‚†Ä‚†Ä‚£∫‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚£ø‚°ø‚°á‚†Ä‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°¥‚£ª‚£ø‚£ø‚£ø‚£Ø‚£ø‚£ø‚°è‚†ò‚£ø‚°ó‚£æ‚£ø‚¢æ‚£ø‚£ø‚£ø‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†§‚¢∂‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚£ø‚°á‚°á‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢®‚£ø‚£ø‚£ø‚£ø‚†ã‚†õ‚†â‚†Å‚†Ä‚¢π‚£ø‚£ø‚£á‚£º‚£ø‚°ø‚†è‚†Ä‚†≤‚¢†‚°¥‚†Ü‚†Ä‚†Ä‚£∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚£ø‚°á‚°ó‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£§‚†§‚†Ä‚¢Ä‚£º‚†õ‚†â‚†õ‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚†ô‚°ó‚†ª‚°Ñ‚†Å‚†Ä‚†Ä‚†Ä‚†ö‚†â‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚£ø‚£ß‚†É‚†Ä‚°á‚†Ä‚†Ä‚£¥‚£æ‚£ø‚£ø‚£ß‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†á‚†Ä‚¢∑‚£¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ä‚†Ä‚†∏‚¢ß‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚¢ø‚£ø‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£Æ‚£ï‚°†‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚£Ä‚£†‚£º‚£ß‚£§‚£§‚£Ñ‚£Ä‚£Ä‚£Ä‚°§‚†ø‚†Ä‚†Ä‚†Ä‚†ô‚£ß‚°Ä‚†Ä‚†Ä‚†Ä
‚£æ‚£ø‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†ö‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚°á‚†Ä‚†Ä‚†Ä
‚£ø‚¢Ω‚†á‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†à‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†õ‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ø‚£§‚†Ä‚†Ä‚†ê‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ª‚£Ü‚†Ä‚†Ä
‚£ø‚¢∏‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚†ø‚£ø‚£ø‚£ø‚°ø‚°è‚†Ä‚†Ä‚†Ä‚†ô‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ü‚†É‚†Ä‚†∞‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£Ü‚†Ä
‚£ø‚¢∏‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†π‚£∂‚£∂‚°¶‚†Ñ‚†Ä‚†â‚†ô‚†õ‚†õ‚†õ‚†õ‚†õ‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Å‚†Ä‚††‚°Ä‚†Ä‚†Ä‚†Ä‚†à‚¢ø‚°á
‚£ø‚¢∏‚†Ä‚†ò‚†Ä‚†Ä‚†Ä‚¢Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚††‚¢Ñ‚£Ä‚£®‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£ß
‚£ø‚¢∏‚°Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†û‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚¢¶‚£å‚£Å‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â
‚†ü‚†∏‚†ø‚¢æ‚£Ñ‚£§‚†é‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Å‚†Ä‚¢Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†∞‚£ø‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚¢∞‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†∂‚†∂‚†∂‚†ü‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ü‚†Ä‚†à‚†ô‚†≥‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
"""
        await context.send(f"Hello {context.author.mention}! :3\n"
                           f"{meow_face}")  # <a:hyper:754213547000725504>


async def setup(bot) -> None:
    await bot.add_cog(Fun(bot))
